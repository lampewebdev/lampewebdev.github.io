{"version":3,"sources":["webpack:///./src/components/Metatags.js","webpack:///./src/templates/blog-post.jsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/utils/typography.js","webpack:///./src/components/Logo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["Metatags","props","react_default","a","createElement","Helmet_default","title","meta","name","content","description","property","pathname","url","thumbnail","lang","__webpack_require__","d","__webpack_exports__","query","BlogPost","post","data","markdownRemark","site","siteMetadata","siteUrl","_post$frontmatter","frontmatter","image","childImageSharp","resize","src","layout","components_Metatags","location","gatsby_image_default","fluid","dangerouslySetInnerHTML","__html","html","r","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","Consumer","staticQueryData","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","pageResources","loader","getResourcesForPathnameSync","InternalPageRenderer","Object","assign","json","shape","typography","Typography","baseFontSize","baseLineHeight","headerFontFamily","bodyFontFamily","plugins","CodePlugin","Logo","gatsby_browser_entry","fixed","placeholderImage","style","display","_1880554309","header","backgroundColor","paddingTop","paddingBottom","boxShadow","to","Layout","Fragment","dist","siteTitle","_755544856","node"],"mappings":"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","file":"component---src-templates-blog-post-jsx-cffd42fba3ca53b7186f.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\n\nfunction Metatags (props) {\n  return (\n    <Helmet\n      title={props.title}\n      meta={[\n        { name: 'title', content: props.title },\n        { name: 'description', content: props.description },\n        {\n          property: 'og:title',\n          content: props.title,\n        },\n        {\n          property: 'og:url',\n          content: props.pathname ? props.url + props.pathname : props.url,\n        },\n        {\n          property: 'og:image',\n          content: props.thumbnail && props.thumbnail,\n        },\n        {\n          property: 'og:image:secure_url',\n          content: props.thumbnail && props.thumbnail,\n        },\n        {\n          property: 'og:description',\n          content: props.description,\n        },\n        {\n          property: 'og:image:width',\n          content: '1200',\n        },\n        {\n          property: 'og:image:height',\n          content: '630',\n        },\n        {\n          property: 'og:locale',\n          content: 'en',\n        },\n        { name: 'twitter:card', content: 'summary_large_image' },\n        { name: 'twitter:title', content: props.title },\n        {\n          name: 'twitter:description',\n          content: props.description,\n        },\n        {\n          name: 'twitter:image',\n          content: props.thumbnail && props.thumbnail,\n        },\n        { property: 'og:type', content: 'website' },\n        { name: 'robots', content: 'index, follow' },\n        { name: 'twitter:creator', content: '@saigowthamr' },\n        { property: 'og:site_name', content: 'yoursitename' },\n      ]}\n    >\n      <html lang=\"en\" />\n    </Helmet>\n  )\n}\n\nexport default Metatags\n","import React from 'react'\nimport Layout from '../components/layout'\nimport Img from 'gatsby-image'\nimport Metatags from '../components/Metatags'\nimport { graphql } from 'gatsby'\n\nfunction BlogPost (props) {\n  const post = props.data.markdownRemark\n  const url = props.data.site.siteMetadata.siteUrl\n  const { title, description } = post.frontmatter\n  const thumbnail = post.frontmatter.image.childImageSharp.resize.src\n  return (\n    <Layout>\n      <Metatags\n        title={title}\n        description={description}\n        thumbnail={url + thumbnail}\n        url={url}\n        pathname={props.location.pathname}\n      />\n      <div>\n        <h1>{title}</h1>\n        <Img fluid={post.frontmatter.image.childImageSharp.fluid} />\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPost\n\nexport const query = graphql`\n  query PostQuery($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        description\n        image {\n          childImageSharp {\n            resize(width: 1500, height: 1500) {\n              src\n            }\n            fluid(maxWidth: 786) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import Typography from 'typography'\nimport CodePlugin from 'typography-plugin-code'\n\nconst typography = new Typography({\n  baseFontSize: '18px',\n  baseLineHeight: 1.666,\n  headerFontFamily: [\n    'Avenir Next',\n    'Helvetica Neue',\n    'Segoe UI',\n    'Helvetica',\n    'Arial',\n    'sans-serif',\n  ],\n  bodyFontFamily: ['Georgia', 'serif'],\n  plugins: [\n    new CodePlugin(),\n  ],\n})\n\nexport default typography\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(\n            relativePath: { eq: \"logoWithoutFont.png\" }\n          ) {\n          childImageSharp {\n            fixed(height: 60) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    `}\n    render={data =>\n      <Img\n        fixed={data.placeholderImage.childImageSharp.fixed}\n        style={{\n          display: 'flex'\n        }}\n      />\n    }\n  />\n)\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Logo from './Logo'\nexport default () => (\n  <h1\n    style={{\n      backgroundColor: '#37a99a',\n      paddingTop: '10px',\n      paddingBottom: '10px',\n      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23)',\n    }}\n  >\n    <Link to=\"/\">\n      <Logo />\n    </Link>\n  </h1>\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\nimport { TypographyStyle, GoogleFont } from 'react-typography'\nimport typography from '../utils/typography'\nimport Header from './header'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n          <html lang=\"en\" />\n          <TypographyStyle typography={typography} />\n          <GoogleFont typography={typography} />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div>\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}