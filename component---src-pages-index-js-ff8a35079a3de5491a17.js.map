{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/utils/typography.js","webpack:///./src/components/Logo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","ListQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","IndexPage","props","postList","data","allMarkdownRemark","a","createElement","edges","map","_ref","i","node","to","fields","slug","className","key","frontmatter","title","date","excerpt","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","Consumer","staticQueryData","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","typography","Typography","baseFontSize","baseLineHeight","headerFontFamily","bodyFontFamily","plugins","CodePlugin","Logo","react_default","gatsby_browser_entry","gatsby_image_default","fixed","placeholderImage","childImageSharp","style","display","_1880554309","header","backgroundColor","paddingTop","paddingBottom","boxShadow","Layout","Fragment","Helmet_default","site","siteMetadata","meta","name","content","lang","dist","siteTitle","_755544856"],"mappings":"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","file":"component---src-pages-index-js-ff8a35079a3de5491a17.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Layout from '../components/layout'\n\nconst IndexPage = props => {\n  const postList = props.data.allMarkdownRemark\n  return (\n    <Layout>\n      {postList.edges.map(({ node }, i) => (\n        <Link to={node.fields.slug} className=\"link\" key={i}>\n          <div className=\"post-list\">\n            <h1>{node.frontmatter.title}</h1>\n            <span>{node.frontmatter.date}</span>\n            <p>{node.excerpt}</p>\n          </div>\n        </Link>\n      ))}\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const ListQuery = graphql`\n  query ListQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"Do MMMM YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import Typography from 'typography'\nimport CodePlugin from 'typography-plugin-code'\n\nconst typography = new Typography({\n  baseFontSize: '18px',\n  baseLineHeight: 1.666,\n  headerFontFamily: [\n    'Avenir Next',\n    'Helvetica Neue',\n    'Segoe UI',\n    'Helvetica',\n    'Arial',\n    'sans-serif',\n  ],\n  bodyFontFamily: ['Georgia', 'serif'],\n  plugins: [\n    new CodePlugin(),\n  ],\n})\n\nexport default typography\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(\n            relativePath: { eq: \"logoWithoutFont.png\" }\n          ) {\n          childImageSharp {\n            fixed(height: 60) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    `}\n    render={data =>\n      <Img\n        fixed={data.placeholderImage.childImageSharp.fixed}\n        style={{\n          display: 'flex'\n        }}\n      />\n    }\n  />\n)\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Logo from './Logo'\nexport default () => (\n  <h1\n    style={{\n      backgroundColor: '#37a99a',\n      paddingTop: '10px',\n      paddingBottom: '10px',\n      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23)',\n    }}\n  >\n    <Link to=\"/\">\n      <Logo />\n    </Link>\n  </h1>\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\nimport { TypographyStyle, GoogleFont } from 'react-typography'\nimport typography from '../utils/typography'\nimport Header from './header'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n          <html lang=\"en\" />\n          <TypographyStyle typography={typography} />\n          <GoogleFont typography={typography} />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div>\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}